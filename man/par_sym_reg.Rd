% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/symreg.R
\name{par_sym_reg}
\alias{par_sym_reg}
\title{Perform Parallel Symbolic Regression}
\usage{
par_sym_reg(
  symbolic_regression,
  evalFunc,
  grammarDef,
  data,
  termination_cost = NA,
  optimizer = "es",
  iterations = 50,
  fit_func,
  verbose = FALSE,
  suggestions = NULL,
  mutationChance = NA,
  n_core = 4
)
}
\arguments{
\item{evalFunc}{A function that evaluates the cost of an expression.
It should accept an expression as input and return a numeric cost.}

\item{grammarDef}{A list containing the grammar definition, variable names, and additional metadata.
This should include:
- `name`: A character vector of variable names.
- `variables`: A vector of variables included in the regression.
- `grammarDef`: The formal grammar object used for GE.}

\item{termination_cost}{Numeric. The stopping criteria for evolution.
If the best cost reaches this value, evolution stops. Default is `NA` (no early stopping).}

\item{optimizer}{Character. The optimization method to use. Options are:
- `"es"`: Evolution Strategy (default).
- `"ga"`: Genetic Algorithm.
- `"random"`: Randomly selects between `"es"` and `"ga"`, with special handling for iterations.}

\item{iterations}{Integer. Number of iterations to run the evolutionary process (default: `200`).
If `optimizer = "random"` and `"es"` is chosen, iterations increase by 10x.}

\item{verbose}{Logical. If `TRUE`, prints real-time updates of the evolutionary process (default: `FALSE`).}

\item{suggestions}{A matrix of suggested genomes to initialize the evolution process.
If `optimizer = "es"`, only the first row is used.}

\item{mutationChance}{Numeric. Mutation probability in the evolutionary algorithm.
If `"random"`, a random value in `[0,1]` is chosen.
Default is `-0.8`, which might need clarification or adjustment.}

\item{n_core}{Integer. The number of CPU cores to use for parallel execution (default: `4`).}
}
\value{
A list containing:
  \describe{
    \item{`output_table`}{A `data.frame` summarizing the best symbolic expressions found across parallel runs.}
    \item{`results_table`}{A `data.frame` containing detailed iteration-wise results from all parallel runs.}
    \item{`genome_matrix`}{A matrix containing the top 3 best genome representations sorted by fitness.}
    \item{`output_raw`}{A list of raw outputs from each parallel execution of `symbolic_regression()`.}
  }
}
\description{
This function runs symbolic regression in parallel across multiple cores, leveraging
`symbolic_regression()` for the evolutionary process on each core.
}
\details{
This function creates a parallel cluster and distributes the symbolic regression tasks
across multiple cores. Each core runs `symbolic_regression()` independently on a copy
of `grammarDef`. The results are then aggregated into structured output tables.
}
\examples{
\dontrun{
  result <- par_sym_reg(
    symbolic_regression = symbolic_regression,
    evalFunc = SymRegFitFunc,
    grammarDef = grammarDef,
    data = data,
    n_core = 4
  )
}

}
