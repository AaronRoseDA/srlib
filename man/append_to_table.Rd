% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/DatabaseOps.R
\name{append_to_table}
\alias{append_to_table}
\title{Append or Replace Data in a Database Table}
\usage{
append_to_table(
  connection,
  table_name,
  data,
  verbose = FALSE,
  DATE_INSERTED = TRUE,
  mode = "append"
)
}
\arguments{
\item{connection}{A valid database connection object.}

\item{table_name}{A string specifying the name of the table to append or replace data in.}

\item{data}{A data frame containing the data to be inserted.}

\item{verbose}{A logical value (default: FALSE). If TRUE, prints a confirmation message upon successful insertion.}

\item{DATE_INSERTED}{A logical value (default: TRUE). If TRUE, updates or adds a `DATE_INSERTED` column
to match the current timestamp before insertion.}

\item{mode}{A string specifying the insertion mode. Must be either "append" (default) or "replace".
"append" adds the data to the table, while "replace" clears the table before inserting new data.}
}
\value{
NULL. The function appends or replaces data in the specified table and prints messages based on user input.
}
\description{
This function appends or replaces data in an existing database table.
If the table does not exist, it prompts the user to select from available tables.
The function also ensures that the `DATE_INSERTED` column is updated if required.
}
\examples{
# Append data to an existing table
df <- data.frame(ID = 6:10, Name = c("F", "G", "H", "I", "J"))
append_to_table(my_connection, table_name = "ExistingTable", data = df)

# Replace all data in an existing table
new_data <- data.frame(ID = 1:5, Name = c("A", "B", "C", "D", "E"))
append_to_table(my_connection, table_name = "ExistingTable", data = new_data, mode = "replace")

# Append data with verbose output
append_to_table(my_connection, table_name = "ExistingTable", data = df, verbose = TRUE)

}
