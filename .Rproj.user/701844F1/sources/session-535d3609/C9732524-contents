#lognormal 

rm(list = ls())
library(RSQLite)
#symbolConn <- dbConnect(SQLite(), dbname = "SymbolRegDB.db")
library(DBI)
library(dplyr)
library(gramEvol)

# 
# dbExecute(symbolConn, "DELETE  FROM ExperResults_Tbl")
# dbExecute(symbolConn, "DELETE  FROM ExperimentConfig_Tbl")



dataSource <- "D:/Symbolic/Statistical Distributions/Univariate"
setwd(dataSource)
inputData<- read.csv("logNormalDist.csv")
inputName <- "LogNormalDist.csv"


o_mu <- inputData$mu
o_sigma <- inputData$sigma
o_xbar <- inputData$xbar
known_entropy<- inputData$entropy


SymRegFitFunc <- function(expr) {
  result <- eval(expr)
  if (any(is.nan(result)))
    return(Inf)
  return (mean(log(1 + abs(known_entropy - result))))
}

expr="expr = grule(op(expr, expr), func(expr), var)"
func="func = grule(sin, cos, log, sqrt)"
op="op = grule('+', '-', '*', '/', '^')"
var="var = grule(o_mu, o_sigma, o_xbar, n)"
n="n = grule(1, 2, 3)"

grammarDefStr<-paste0("ruleDef<-list(",expr,",", func,",", op,",", var,",", n,  " )")
testGrammar<- eval(parse(text=grammarDefStr))
grammarDef <- CreateGrammar(testGrammar)


runType="es"
geStr<-paste0("ge<-GrammaticalEvolution(grammarDef,SymRegFitFunc,terminationCost=0.05,optimizer = '",
              runType,"', iterations = 3000000,monitorFunc = print)")
geStr

set.seed(2)
start_time <- Sys.time()

gramEvolution<- eval(parse(text =geStr))
end_time <- Sys.time()

summary(geStr)
str(geStr)


best.expression <- gramEvolution$best$expression

best.expression


# Calculate and log total runtime
runtime <- difftime(end_time, start_time)
runtime
